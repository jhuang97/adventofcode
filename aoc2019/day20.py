def in_donut(c):
    return c == '.' or c == '#'

def in_maze(donut_arr, coords):
    return in_donut(get(donut_arr, coords))

def get(donut_arr, coords):
    return donut_arr[coords[1]][coords[0]]

def get_dimensions(donut_arr):
    yo1 = -1
    for yidx in range(len(donut_arr)):
        maze_started = False
        for xidx in range(len(donut_arr[0])):
            if in_donut(donut_arr[yidx][xidx]):
                maze_started = True
                yo1 = yidx
                break
        if maze_started:
            break
    yo2 = -1
    for yidx in range(yo1, len(donut_arr)):
        has_maze = False
        for xidx in range(len(donut_arr[0])):
            if in_donut(donut_arr[yidx][xidx]):
                has_maze = True
                break
        if not has_maze:
            yo2 = yidx-1
            break
    xo1 = -1
    for xidx in range(len(donut_arr[0])):
        if in_donut(donut_arr[yo1][xidx]):
            xo1 = xidx
            break
    xo2 = -1
    for xidx in range(xo1, len(donut_arr[0])):
        if not in_donut(donut_arr[yo1][xidx]):
            xo2 = xidx-1
            break

    xc = (xo1+xo2)//2
    yc = (yo1+yo2)//2

    xp = xc
    while not in_donut(donut_arr[yc][xp]):
        xp += 1
    xi2 = xp-1
    xp = xc
    while not in_donut(donut_arr[yc][xp]):
        xp -= 1
    xi1 = xp+1

    yp = yc
    while not in_donut(donut_arr[yp][xc]):
        yp += 1
    yi2 = yp-1
    yp = yc
    while not in_donut(donut_arr[yp][xc]):
        yp -= 1
    yi1 = yp+1

    return xo1, xo2, yo1, yo2, xi1, xi2, yi1, yi2

def get_maze_coords(donut_arr):
    maze_coords = set()
    for yidx in range(len(donut_arr)):
        for xidx in range(len(donut_arr[0])):
            coords = (xidx, yidx)
            if get(donut_arr, coords) == '.':
                maze_coords.add(coords)
    return maze_coords

def parse_donut(donut_string):
    donut_arr = [list(s) for s in donut_string.split('\n')]
    d_dims = get_dimensions(donut_arr)
    xo1, xo2, yo1, yo2, xi1, xi2, yi1, yi2 = d_dims
    print('%d %d %d %d   %d %d %d %d' % (xo1, xo2, yo1, yo2, xi1, xi2, yi1, yi2))

    out_labels = parse_labels(donut_arr, (xo1, yo1), (0,-1), (1,0), 1)
    in_labels = parse_labels(donut_arr, (xi1, yi1-1), (0,1), (1,0), 1)
    all_labels = {**out_labels, **in_labels}
    print(all_labels)

    label_pairs = {}
    entrance = None
    exit = None
    for coords, name in all_labels.items():
        if name == 'AA':
            entrance = coords
        elif name == 'ZZ':
            exit = coords
        elif name in label_pairs:
            label_pairs[name].append(coords)
        else:
            label_pairs[name] = [coords]

    portals = {}
    for pair in label_pairs.values():
        if len(pair) == 2:
            portals[pair[0]] = pair[1]
            portals[pair[1]] = pair[0]
        else:
            print('unpaired portal!')

    maze_coords = get_maze_coords(donut_arr)

    return entrance, exit, maze_coords, portals

def parse_donut2(donut_string):
    donut_arr = [list(s) for s in donut_string.split('\n')]
    d_dims = get_dimensions(donut_arr)
    xo1, xo2, yo1, yo2, xi1, xi2, yi1, yi2 = d_dims
    # print('%d %d %d %d   %d %d %d %d' % (xo1, xo2, yo1, yo2, xi1, xi2, yi1, yi2))

    out_labels = parse_labels(donut_arr, (xo1, yo1), (0,-1), (1,0), 1)
    in_labels = parse_labels(donut_arr, (xi1, yi1-1), (0,1), (1,0), 1)
    all_labels = {**out_labels, **in_labels}
    # print(all_labels)

    label_pairs = {}
    entrance = None
    exit = None
    for coords, name in all_labels.items():
        if name == 'AA':
            entrance = coords
        elif name == 'ZZ':
            exit = coords
        elif name in label_pairs:
            label_pairs[name].append(coords)
        else:
            label_pairs[name] = [coords]

    out_coords = set()
    for coords, name in out_labels.items():
        if name != 'AA' and name != 'ZZ':
            out_coords.add(coords)
    in_coords = set()
    for coords in in_labels.keys():
        in_coords.add(coords)

    portals = {}
    for pair in label_pairs.values():
        if len(pair) == 2:
            portals[pair[0]] = pair[1]
            portals[pair[1]] = pair[0]
        else:
            print('unpaired portal!')

    maze_coords = get_maze_coords(donut_arr)

    return entrance, exit, maze_coords, portals, in_coords, out_coords

def add2(t1, t2):
    return (t1[0] + t2[0], t1[1] + t2[1])

def minus2(t1, t2):
    return (t1[0] - t2[0], t1[1] - t2[1])

dirs = [(1, 0), (0, 1), (-1, 0), (0, -1)]
d_num = {(1,0):0, (0,1):1, (-1,0):2, (0,-1):3}

def turn(m_dir, n):
    return dirs[(d_num[m_dir] + n) % 4]

def in_array(arr, coords):
    return coords[0] >= 0 and coords[1] >= 0 and coords[0] < len(arr[0]) and coords[1] < len(arr) 

def get_label(donut_arr, out_pos, norm_dir):
    out = get(donut_arr, out_pos)
    while True:
        out_pos = add2(out_pos, norm_dir)
        if not in_array(donut_arr, out_pos):
            break

        c = get(donut_arr, out_pos)
        if c.isalpha():
            out = out + c
        else:
            break
    if norm_dir[0] + norm_dir[1] > 0:
        return out
    else:
        return out[::-1]

# walks around the boundary and finds all the labels
def parse_labels(donut_arr, start_pos, norm_dir0, v_dir0, turn_sign):
    norm_dir = norm_dir0
    v_dir = v_dir0
    in_pos = start_pos # in the maze
    out_pos = add2(in_pos, norm_dir)

    labels = {}
    first_run = True
    while True:
        if first_run:
            first_run = False
        else:
            if in_pos == start_pos:
                break

        if in_maze(donut_arr, in_pos):
            if not in_maze(donut_arr, out_pos):
                if get(donut_arr, out_pos).isalpha():
                    labels[in_pos] = get_label(donut_arr, out_pos, norm_dir)

                in_pos = add2(in_pos, v_dir)
                out_pos = add2(out_pos, v_dir)
            else:
                # print('ran into maze')
                # print(in_pos)
                # print(out_pos)
                # print(norm_dir)
                # print(v_dir)
                in_pos = out_pos
                v_dir = turn(v_dir, turn_sign)
                norm_dir = turn(norm_dir, turn_sign)
                out_pos = add2(in_pos, norm_dir)
        else:
            if not in_maze(donut_arr, out_pos):
                # print('ran out of maze')
                # print(in_pos)
                # print(out_pos)
                # print(norm_dir)
                # print(v_dir)
                in_pos = minus2(in_pos, v_dir)
                v_dir = turn(v_dir, turn_sign)
                norm_dir = turn(norm_dir, turn_sign)
                out_pos = add2(in_pos, norm_dir)
            else:
                print('boo')
                break

    return labels

def get_neighbors(maze_info, pt):
    entrance, exit, maze_coords, portals = maze_info
    neighbors = []
    for d in dirs:
        c = add2(pt, d)
        if c in maze_coords:
            neighbors.append(c)
    if pt in portals:
        neighbors.append(portals[pt])
    return neighbors

def maze_dist(maze_info):
    entrance, exit, maze_coords, portals = maze_info
    dist_to_start = {entrance: 0}

    cur_dist = 0
    cur_dist_pts = {entrance}
    next_pts = set()
    while len(cur_dist_pts) > 0:
        for pt in cur_dist_pts:
            neighbors = get_neighbors(maze_info, pt)
            for n in neighbors:
                if n not in dist_to_start:
                    next_pts.add(n)
                if n == exit:
                    list_plot(dist_to_start.keys())
                    return cur_dist+1
        for pt in next_pts:
            dist_to_start[pt] = cur_dist+1
        cur_dist_pts = next_pts
        next_pts = set()
        cur_dist += 1
    print('cur_dist %d' % cur_dist)
    list_plot(dist_to_start.keys())
    return -1

def get_neighbors2(maze_info2, pt3):
    entrance, exit, maze_coords, portals, in_coords, out_coords = maze_info2
    neighbors = []
    pt, level = pt3
    # print('pt %d %d; %d' % (pt[0], pt[1], level))
    for d in dirs:
        c = add2(pt, d)
        if c in maze_coords:
            neighbors.append((c, level))
    if pt in portals and not (level == 0 and pt in out_coords):
        if pt in in_coords:
            # print('pt %d %d in in_coords' % pt)
            neighbors.append((portals[pt], level+1))
        if pt in out_coords:
            # print('pt in out_coords')
            neighbors.append((portals[pt], level-1))
    return neighbors

def maze_dist2(maze_info2):
    entrance, exit, maze_coords, portals, in_coords, out_coords = maze_info2
    dist_to_start = {(entrance, 0): 0}

    cur_dist = 0
    cur_dist_pts = {(entrance, 0)}
    next_pts = set()
    while len(cur_dist_pts) > 0:
        for pt3 in cur_dist_pts:
            neighbors = get_neighbors2(maze_info2, pt3)
            for n in neighbors:
                if n not in dist_to_start:
                    next_pts.add(n)
                if n == (exit, 0):
                    # list_plot(dist_to_start.keys())
                    return cur_dist+1
        for pt3 in next_pts:
            dist_to_start[pt3] = cur_dist+1
        cur_dist_pts = next_pts
        next_pts = set()
        cur_dist += 1
    print('cur_dist %d' % cur_dist)
    # list_plot(dist_to_start.keys())
    return -1

def list_plot(c_list):
    x1 = 10000
    x2 = -10000
    y1 = 10000
    y2 = -10000
    for coords in c_list:
        x = coords[0]
        if x < x1:
            x1 = x
        if x > x2:
            x2 = x
        y = coords[1]
        if y < y1:
            y1 = y
        if y > y2:
            y2 = y
    out_arr = [['.' for j in range(x2-x1+1)] for i in range(y2-y1+1)]
    for coords in c_list:
        out_arr[coords[1]-y1][coords[0]-x1] = '#'

    for row in out_arr:
        print("".join(row))

if __name__ == '__main__':
    import copy

    donut = """         A           
         A           
  #######.#########  
  #######.........#  
  #######.#######.#  
  #######.#######.#  
  #######.#######.#  
  #####  B    ###.#  
BC...##  C    ###.#  
  ##.##       ###.#  
  ##...DE  F  ###.#  
  #####    G  ###.#  
  #########.#####.#  
DE..#######...###.#  
  #.#########.###.#  
FG..#########.....#  
  ###########.#####  
             Z       
             Z       """
    donut2 = """                   A               
                   A               
  #################.#############  
  #.#...#...................#.#.#  
  #.#.#.###.###.###.#########.#.#  
  #.#.#.......#...#.....#.#.#...#  
  #.#########.###.#####.#.#.###.#  
  #.............#.#.....#.......#  
  ###.###########.###.#####.#.#.#  
  #.....#        A   C    #.#.#.#  
  #######        S   P    #####.#  
  #.#...#                 #......VT
  #.#.#.#                 #.#####  
  #...#.#               YN....#.#  
  #.###.#                 #####.#  
DI....#.#                 #.....#  
  #####.#                 #.###.#  
ZZ......#               QG....#..AS
  ###.###                 #######  
JO..#.#.#                 #.....#  
  #.#.#.#                 ###.#.#  
  #...#..DI             BU....#..LF
  #####.#                 #.#####  
YN......#               VT..#....QG
  #.###.#                 #.###.#  
  #.#...#                 #.....#  
  ###.###    J L     J    #.#.###  
  #.....#    O F     P    #.#...#  
  #.###.#####.#.#####.#####.###.#  
  #...#.#.#...#.....#.....#.#...#  
  #.#####.###.###.#.#.#########.#  
  #...#.#.....#...#.#.#.#.....#.#  
  #.###.#####.###.###.#.#.#######  
  #.#.........#...#.............#  
  #########.###.###.#############  
           B   J   C               
           U   P   P               """
    donut = """             Z L X W       C                 
             Z P Q B       K                 
  ###########.#.#.#.#######.###############  
  #...#.......#.#.......#.#.......#.#.#...#  
  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  
  #.#...#.#.#...#.#.#...#...#...#.#.......#  
  #.###.#######.###.###.#.###.###.#.#######  
  #...#.......#.#...#...#.............#...#  
  #.#########.#######.#.#######.#######.###  
  #...#.#    F       R I       Z    #.#.#.#  
  #.###.#    D       E C       H    #.#.#.#  
  #.#...#                           #...#.#  
  #.###.#                           #.###.#  
  #.#....OA                       WB..#.#..ZH
  #.###.#                           #.#.#.#  
CJ......#                           #.....#  
  #######                           #######  
  #.#....CK                         #......IC
  #.###.#                           #.###.#  
  #.....#                           #...#.#  
  ###.###                           #.#.#.#  
XF....#.#                         RF..#.#.#  
  #####.#                           #######  
  #......CJ                       NM..#...#  
  ###.#.#                           #.###.#  
RE....#.#                           #......RF
  ###.###        X   X       L      #.#.#.#  
  #.....#        F   Q       P      #.#.#.#  
  ###.###########.###.#######.#########.###  
  #.....#...#.....#.......#...#.....#.#...#  
  #####.#.###.#######.#######.###.###.#.#.#  
  #.......#.......#.#.#.#.#...#...#...#.#.#  
  #####.###.#####.#.#.#.#.###.###.#.###.###  
  #.......#.....#.#...#...............#...#  
  #############.#.#.###.###################  
               A O F   N                     
               A A D   M                     """
    donut = """                                     K       V         M     Q           D     N                                         
                                     J       R         U     D           R     I                                         
  ###################################.#######.#########.#####.###########.#####.#######################################  
  #...#.#.......#.......#.................#.#.#...........#...#.......#.......#...#.#.......#.#...................#.#.#  
  ###.#.#.###.#######.#.#########.#.#####.#.#.#####.#.#.#.###.#.###.#######.###.###.#####.###.#.#.###.###.#.###.#.#.#.#  
  #.....#.#.....#.....#...........#.#.#...#...#...#.#.#.#...#.#.#.#.#...#...#.......#...........#.#.#...#.#...#.#...#.#  
  #.###.#.###.###############.#.#####.#.#####.###.###.#.#####.#.#.#.#.#.#.###.#.#######.###.#.#.###.#########.#######.#  
  #.#.#.#.#.......#...........#.#.#.#.....#.#.......#.#.#.#.#.....#.#.#.....#.#.#.........#.#.#...#.....#.#.#...#.....#  
  ###.#.###.#########.#.#.#####.#.#.#.###.#.#.#.#####.###.#.#######.#.#.#.###.#####.###.#####.#####.#####.#.#####.#####  
  #.........#.#...#...#.#.#...#.#.....#.....#.#.....#...#...........#.#.#.#...#.#.....#...#.............#.........#.#.#  
  ###.#####.#.###.###.#####.#########.#####.###.###.#.#######.###.#.#.###.#.#.###.#.#######.###.###.#####.#########.#.#  
  #...#.#.#.........#.#.......#.....#...#.....#.#...#.#.........#.#.#...#.#.#.#...#...#...#...#...#...#.#.....#...#...#  
  #.###.#.#.###.#.#######.#########.#####.#.#######.#.#########.#######.#####.#.###.###.#######.#.#####.#.#######.#.###  
  #.#...#.#.#.#.#.#...#.#.....#.#.#...#.#.#...#.#...#.....#.......#.#.....#.......#.#.#.....#...#.#...................#  
  #####.#.#.#.#####.###.###.#.#.#.#.###.###.###.###.###.###.###.###.#.#######.#.###.#.#.#.#.###########.#.#####.#####.#  
  #.#.............#.#.....#.#...#.#.........#.......#.#.#.#.#.......#.#...#...#...#.....#.#.#...#.....#.#.#...#.....#.#  
  #.###.#.#.#.#.###.###.#####.###.###.###.#####.###.#.#.#.###.###.#.#.#.#####.#.###.###.#####.###.#.###.###.###########  
  #.#.#.#.#.#.#.#.#...#.................#.....#...#.#.....#.....#.#.#.......#.#.#...#.#.....#.....#.#.......#...#...#.#  
  #.#.###.#######.#.#.#.###########.#.###.###.#####.#.#############.###.#########.#.#.#####.#.#####.###.###.###.###.#.#  
  #.#.#...#.#...#.#.#.#.#.#...#.#.#.#...#.#...#.#.#.#.#...#.#.#.#.#.#...#...#.#.#.#.#.#.#.#...#...#.#.....#.....#.#...#  
  #.#.#.###.#.###.###.###.#.#.#.#.#.#.#######.#.#.#.#.#.###.#.#.#.#.#.###.###.#.#.#.#.#.#.#.#.#.#######.#.###.###.#.###  
  #...#.#.#.....#.#.....#...#.#.#.#.#...#.#.#.#.....#.............#.#...........#.#.......#.#...#.#.....#...#.#.#...#.#  
  ###.#.#.#.#.###.###.#####.###.#.###.###.#.#######.#######.###.###.#.###.###.#####.#########.#.#.###.#######.#.#.###.#  
  #.....#.#.#.#.#...#.#.....#.................#.#...#.........#.#.#.#.#...#...#.....#.#.#.#.#.#.#.#.#...#.#.#.#...#.#.#  
  #####.#.###.#.#.###.#####.#.#########.#######.###.###.#######.#.#.###.#.###.#####.#.#.#.#.#####.#.#.###.#.#####.#.#.#  
  #.....#.#.........#...#...#.#.#...........#.........#.......#.#.....#.#.#.#.#...#.....#...#...#.....#...#...#...#...#  
  #####.#.###.###.###.###.#####.#####.#.#########.#######.###.#####.###.###.#####.#.#####.###.#####.###.#####.#.###.###  
  #.......#...#.#.#.#.....#.....#.....#...#...#.......#.....#.#.#...#.........#.#...#.#.#.#...#.#.#...#...#.......#...#  
  #.#.#.#.#####.#.#.#####.###.#######.#####.#####.###.###.#.###.#.#.#.#####.###.#.###.#.#.#.###.#.#.###.#####.#####.###  
  #.#.#.#.#.#...#...#...#.#.....#.#.......#.#.#.#...#...#.#...#.#.#.#.#.......#...#.#.........#.#.#...#...#.#.#.#.....#  
  #######.#.#.###.###.###.###.###.#####.###.#.#.###.#######.###.###.###.#########.#.#.#####.###.#.#.###.###.#.#.###.#.#  
  #.#.......#...#.#.....#.#...#.#...........#.............#.#.........#.......#...........#.........#.#...#...#.#.#.#.#  
  #.#######.#.###.#.###.#.###.#.###########.#.#############.#.#############.#####.#######.###.#.#####.#.#####.#.#.#.###  
  #.#...#.#.....#.#.#.#.#.#.#...#          T O             V Q             N     K      #.#...#.#.#.#.#.#...#.#...#.#.#  
  #.#.###.#.#####.###.#.#.#.#.###          J P             R H             I     J      #########.#.#.#.#.#.#.#.#.#.#.#  
  #.................#...#...#.#.#                                                       #...#.......#...#.#.#...#.#...#  
  #.#####.###.#####.#.#.#.#.#.#.#                                                       ###.#####.###.#####.###.#####.#  
  #...#.....#...#.....#...#.....#                                                       #.#.#.....#...#.#.#...#...#...#  
  #.#########.###.#.#.#.###.###.#                                                       #.#.#####.#.###.#.###.###.#.###  
  #...#.......#...#.#.#...#...#..DR                                                     #...............#.....#.#.....#  
  #.###########.###.#######.###.#                                                       ###.#######.###.#.#.###.#.#.###  
QC....#.#.#.#.....#.#.....#.#...#                                                       #.....#.......#...#.#...#.#.#..CA
  #####.#.#.#.#.###.###.#########                                                       #.#.#####.###.#####.#.#.#.#.#.#  
  #.#.#.....#.#.#.....#.........#                                                       #.#.....#.#.....#.....#...#.#.#  
  #.#.###.#.###########.###.###.#                                                       #.#.#####.#.#######.#.#.#.#.#.#  
XF....#...#.......#.#.....#.#....KM                                                   QD..#.#.....#.#.......#.#.#.#...#  
  #.#####.#.#######.#.#####.#####                                                       ###################.#.###.#####  
ZZ..#.....#.....#.#.#.#...#.....#                                                       #.#...#.....#.#.....#...#.#....LU
  #.###.#.#.#####.#.###.#.#####.#                                                       #.###.###.###.###.#.#######.###  
  #.....#.#.............#.......#                                                     WC......#.#.#.#...#.#.#.#...#....AA
  ###############.#.#######.#.###                                                       #.#####.#.#.#.#######.#.#.#.#.#  
  #.............#.#.#...#.#.#.#.#                                                       #.#.#.....#...#.#.#...#.#.#.#.#  
  #.###.#######.#####.###.#####.#                                                       #.#.###.#####.#.#.###.#.#.###.#  
  #.#...#.........#.......#.#.#..QC                                                     #.......................#.....#  
  #.#.#.###.#############.#.#.#.#                                                       #############.#################  
  #.#.#.#.#.#.......#.#.#.....#.#                                                     AO............#.#.....#.#.......#  
  #.###.#.#.#.#######.#.#.#.###.#                                                       #.#.###.#.#.###.###.#.#.#####.#  
ME....#.#.................#.....#                                                       #.#.#.#.#.#.......#...#...#....XB
  ###########.###.#.###.#.#.###.#                                                       #.#.#.#####.###.###.#####.#.###  
  #.......#.....#.#...#.#.#.#.#.#                                                     MH..#.#.#...#...#.#.#.#...#.#...#  
  #.#.###.###.#####.#########.###                                                       #####.#.#######.#.#.#.#.#.###.#  
  #.#.#.#...#.#...#.#...#........XF                                                     #...#...#...#...#.....#.....#..NH
  #.#.#.#.#####.#####.#####.###.#                                                       #.#####.#.#############.#####.#  
HU..#.#.....#.#.....#.#.#.....#.#                                                       #.......#...........#.#.#.#...#  
  #######.###.#.#####.#.#####.###                                                       #.#.###.#.###.#.#####.###.###.#  
  #.#...#.....................#.#                                                       #.#.#...#...#.#.#.....#.#.#.#.#  
  #.###.#######################.#                                                       #.###.#.###.#.#.###.###.#.#.###  
  #.........#.............#.....#                                                     XB....#.#.#...#.#.#...#.....#.#..WY
  #.#######.#.#######.#.#.#.#.#.#                                                       #.###.###.###.#####.###.###.#.#  
  #.#...#...#...#...#.#.#.#.#.#.#                                                       #.#.......#.#.................#  
  #.#.#.#.#.###.#####.###.#.#.###                                                       ###.#.#####.###################  
  #...#.#.#...#.....#...#...#...#                                                       #...#.#.....#.......#.....#...#  
  #####.#.#######.#############.#                                                       #########.#.#.###.#.#.###.#.#.#  
AO......#.........#.#.....#.#....CA                                                     #.#.#.....#...#...#.....#...#.#  
  #################.#####.#.#####                                                       #.#.###.###.#################.#  
  #...#..........................WY                                                   LU....#.....#...#.#.#.....#...#..OP
  #.#.#.###.#####.###.#.#########                                                       #.###.#########.#.#.#.###.###.#  
  #.#...#.....#.#...#.#...#.....#                                                       #.....#.#.......#.#.#...#.#.#.#  
  #.###.###.###.#.#############.#                                                       #######.#####.###.#####.#.#.###  
WC....#.#.....#...#...#...#...#.#                                                     HU......#...#...#...#...#.......#  
  #####.#.#.#####.#.#####.###.#.#                                                       #####.#.#.#.###.#.#.#.#.#####.#  
  #...#.#.#.#.#.#.#...#.........#                                                       #.....#.#.......#...#...#......QL
  #.#########.#.###.#.#.#######.#                                                       #.###.#.#####.###.#.#.#####.###  
  #...#.#...#.#...#.#...#...#...#                                                       #...#.#...#...#...#.#.#.#.....#  
  #.###.#.###.#.###.#.#.#####.###                                                       ###.###.###.#.###.###.#.###.###  
QH....#.#...#.#.....#.#...#...#.#                                                       #.........#.#.#.....#.#.......#  
  #.###.#.###.#.###.#######.###.#                                                       ###.#.#.#######.#.#.#.###.###.#  
  #.............#.#.....#........QL                                                     #...#.#.#...#...#.#.#.#...#...#  
  #.#.###.###.#.#.#.#.#.###.#.#.#                                                       ###.#.#.#.###.#.#.#.#########.#  
  #.#.#...#...#.#...#.#.#.#.#.#.#                                                       #.#.#.#.....#.#.#.#.........#.#  
  #####.#.#####.#######.#.###.###        H       N   M         K   R     Q         M    #.###.#.#####.#.#####.#######.#  
  #.#...#...#.#.......#.#.#.#.#.#        K       H   E         A   B     N         U    #.#...#...#...#.....#...#.....#  
  #.#####.#.#.#.#.#####.#.#.###.#########.#######.###.#########.###.#####.#########.#####.#.###.#.#.#.###.###.#######.#  
  #.......#.#...#...#...#.#...............#...#...#.....#.......#.....#...#...#.#.#.......#...#.#.#.#.#.....#...#.....#  
  ###.#.#.###.#.#.###.###.#####.#########.#.#####.###.#####.#.#.#.#######.#.#.#.#.###.#.###.#####.###.#####.#######.#.#  
  #...#.#...#.#.#...#.#.#.#...#.#.#.#.#.......#.#.#.....#...#.#.#...#.....#.#.....#.#.#.#.......#...#.#.......#.#...#.#  
  #.###.#######.#######.#.#.#####.#.#.#.#######.#.###.###.#####.###.###.#.#.###.###.#.#####.###.#########.#.###.###.#.#  
  #.#...#.........#.....#...#.....#...........#.#...#...#.....#.#.....#.#.#.#...#.........#.#.......#.#.#.#...#...#.#.#  
  #.###.###.###.###.###.#.#######.#####.#.#####.#.#####.#.#.###.#####.###.#.#.#.###.###########.#####.#.###.###.###.###  
  #...#.#.#.#.....#...#.....#...........#.#.........#...#.#...#.#.#.....#.#.#.#.#.....#.#.#...#.....#.#.#.........#...#  
  ###.#.#.#####.#######.#.#########.#####.###.#########.###.#####.###.#.#.#.#.###.#####.#.#.#########.#.###.#.###.#.###  
  #...#.#.......#.....#.#.......#...#.....#.#.....#.#...#...#.#.#.....#.#...#.#...#.......#.....#.#...#.....#...#.#...#  
  #########.#########.###.###.#########.#.#.#####.#.#.#####.#.#.#.###.#######.###.#.#.#####.#####.#.#######.#######.#.#  
  #...............#.......#.....#.....#.#.#.......#.....#.......#.#...#.#.......#...#...#.#.#...#.....#...#.....#...#.#  
  #.#.#.#.#.###.###.###.#####.#.#.#######.###.#####.#######.###.#.###.#.###.#.#####.#.###.#.#.#####.###.###.#########.#  
  #.#.#.#.#.#.#.#...#...#.....#.....#.....#.......#.......#.#.#.#...#.#.....#...#...#...#...#.............#.#.....#...#  
  #####.###.#.###.#.#########.#########.#.###.###.#####.#####.#.#.#######.#.###.#####.#.#.###.###.#.#########.#######.#  
  #.#.....#...#...#.#.....#.......#.#.#.#.#.#.#.#...#...#.#.....#...#...#.#.#.#...#.#.#...#.....#.#...............#...#  
  #.#.#####.#.###########.###.#.###.#.###.#.###.#.###.#.#.#####.#.###.###.###.#.###.#.#######.#.###.#####.#.###.#.#.#.#  
  #...#.....#...#.........#...#.#.#...#.....#.....#...#.#...#...#...#...#...#.#.#.....#.#.....#...#...#.#.#...#.#.#.#.#  
  #######.###.#.#####.###.###.###.#.#.#.###.###.###.#######.###.###.#.#.#.###.###.###.#.#.#######.#####.###.#.#########  
  #.#.#...#...#.#.....#.............#.....#.#.....#...#.........#...#.#.#.#.....#.#.......#...#.#.......#...#.#...#...#  
  #.#.#######.#############.#####.#.###.#########.###.#####.#.#.#.###.#.#.#.#.#####.#.#.#.#.###.#######.#########.###.#  
  #.....#.#.......#.#.#.......#...#...#.#.......#...#...#...#.#.#.#...#.#...#.#.#...#.#.#.........#...#.....#.....#...#  
  #.#.###.#.#.#####.#.###.#########.#####.#.#.###.#####.#.#####.#.#.###.#####.#.#####.#############.#########.#.#####.#  
  #.#.......#.#.#.......#.#.........#...#.#.#...#.#.....#...#.#.#...#.#.#.......#...#.......#...........#.#.#.#.#.#...#  
  #####.###.#.#.###.###.#.###.#.###.#.#.#.#.###.#.#.#.#.#.###.###.###.#.#.#########.#.#.#.###.#####.#.#.#.#.###.#.###.#  
  #.....#.#.#.#.......#...#...#.#.....#.#.#.#.#...#.#.#.#...#.#.#...#...#.#.......#.#.#.#.#.....#.#.#.#.........#...#.#  
  ###.###.#.#######.###.#.#############.###.#.#####.###.#.###.#.#####.###.#.#.#####.#.#####.#####.#######.#.#.###.#.#.#  
  #...#.....#.#.#...#.#.#.#.#.#.....#.....#.#.....#.#...#.#.....#.......#...#...#.......................#.#.#.....#...#  
  #.#####.###.#.#####.#####.#.#####.#####.#.###.#.#####.#.#.###.#####.#########.#####.#.#.#.#####.###.#.#####.#.#####.#  
  #.#.....#...............................#.....#.#.....#...#...#.....#.........#.....#.#.#...#.....#.#.....#.#...#...#  
  #################################.#############.#.#########.###.#########.#####.#####################################  
                                   K             T H         Q   K         R     M                                       
                                   A             J K         N   M         B     H                                       """

    maze_info = parse_donut(donut)
    entrance, exit, maze_coords, portals = maze_info
    list_plot(maze_coords)
    print(entrance)
    print(exit)
    print(portals)

    print('part 1 maze distance: %d' % maze_dist(maze_info))

    maze_info2 = parse_donut2(donut)
    entrance, exit, maze_coords, portals, in_coords, out_coords = maze_info2
    # print(in_coords)
    # print(out_coords)
    print('part 2 maze distance: %d' % maze_dist2(maze_info2))